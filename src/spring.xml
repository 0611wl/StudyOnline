<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http:www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"
           >
     <!-- 配置整合mybatis过程 -->
     <!-- 1.配置数据库相关参数properties的属性：${url} -->     
	 <context:property-placeholder location="classpath:db.properties"/>
	 
	 <!-- 2.数据库连接池 -->
	    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	       <!-- 配置连接池属性 -->
	       <property name="driverClass" value="${datasource.driver}" />
	       <property name="jdbcUrl" value="${datasource.url}" />
	       <property name="user" value="${datasource.username}" />
	       <property name="password" value="${datasource.username}" />
	       <!-- c3p0连接池的私有属性 -->
	       <property name="maxPoolSize" value="30" />
	       <property name="minPoolSize" value="10" />
	       <!-- 关闭连接后不自动commit -->
	       <property name="autoCommitOnClose" value="false" />
	       <!-- 获取连接超时时间 -->
	       <property name="checkoutTimeout" value="10000" />
	    </bean>
     
     <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:conf.xml" />
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="com.study.entitys" />
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:com/study/mapping/*.xml" />
    </bean>
    
    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.study.dao" />
    </bean>
    
    
    <!-- 扫描service包下所有使用注解的类型 -->
    <context:component-scan base-package="com.study.service.imp" />
    <context:component-scan base-package="com.study.data"/>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 配置基于注解的声明式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    
	<bean id="dataCenter" class="com.study.data.DataCenter" factory-method="getInstance">
    </bean>
    <bean id="courseData" class="com.study.data.CourseData" factory-method="getInstance">
    	
    </bean> 
    <bean id="studentData" class="com.study.data.StudentData" factory-method="getInstance">
    
    </bean>
    <bean id="teacherData" class="com.study.data.TeacherData" factory-method="getInstance">
    
    </bean>
    <bean id="chapterData" class="com.study.data.ChapterData" factory-method="getInstance">
    
    </bean>
    <bean id="materialData" class="com.study.data.MaterialData" factory-method="getInstance">
    
    </bean>
</beans>